{"version":3,"sources":["weatherComponent/weather.component.jsx","weatherComponent/form.jsx","App.js","serviceWorker.js","index.js"],"names":["minmaxTemp","min","max","className","weather","props","city","Temp","weatherIcon","minTemp","maxTemp","description","error","role","LocationInput","onSubmit","loadweather","type","name","autoComplete","placeholder","api_key","App","getWeatherIcon","icon","weatherId","setState","icons","weatherIcons","Thunderstorm","Drizzle","Snow","Atmosphere","convertToCelsius","temp","Math","floor","clearInput","e","target","elements","value","weatherInfo","a","preventDefault","country","fetch","api_call","json","res","console","log","sys","main","Temp_max","temp_max","Temp_min","temp_min","state","undefined","Rain","clear","Clouds","this","WeatherIcon","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.4b8711a1.chunk.js","sourcesContent":["import React from 'react'\n\nconst weather = (props) => {\n    \n    return(\n      <div className=\"container text-light\">\n         \n        <div className=\"cards\">\n          <h1>{props.city}</h1>\n          {/* <h3 className='py-2'>{props.Temp}&deg; </h3> */}\n\n           {props.Temp ? (<h2 className='py-2'>{props.Temp}&deg;</h2> ): null}\n          <h5 className='py-4'>\n            <i className={`wi ${props.weatherIcon} display-1`}></i>\n          </h5>\n          {minmaxTemp(props.minTemp, props.maxTemp)}\n          <h4 className=\"py-4\">\n            {props.description}\n          </h4>\n        </div>\n      </div>\n    )\n};\n\nconst minmaxTemp = (min, max) => {\n  if(min && max){\n    return (\n      <h4>\n        <span className=\"px-4\">{min}&deg;</span>\n        <span className=\"px-4\">{max}&deg;</span>\n      </h4>\n    )\n  }  \n\n}\n\nexport default weather; ","import React from 'react'\r\n import './formStyle.css';\r\n\r\n//  git remote add origin <repo>\r\n//  add homepage and predeploy and deploy in package.json\r\n// installl/add gh-pages 3\r\n// npm run deploy 4\r\n// git add -A\r\n// git commit and push origin repo branch\r\nconst LocationInput = (props) => {\r\n  return (\r\n    <div className='container my-2'>\r\n     {props.error ? error() : null}\r\n      <form onSubmit={props.loadweather}>\r\n         <div className=\"row\">\r\n            <div className=\"col-md-3 offset-md-2\">\r\n              <input type='text' className='form-control my-2' name='city' autoComplete='off' placeholder='city' />\r\n            </div>\r\n            <div className=\"col-md-3\">\r\n            <input type='text' className='form-control my-2' name='country' autoComplete='off' placeholder='country' />\r\n            </div>\r\n            <div className=\"col-md-3 mt-md-0 text-md-0\">\r\n              <button className=\"btn btn-warning my-2\">Get Weather</button>\r\n            </div>\r\n        </div>\r\n      </form>  \r\n    </div>\r\n  )\r\n};\r\n\r\nconst error = () => {\r\n  return(\r\n    <div className=\"alert alert-danger mx-5\" role='alert'>\r\n      Please enter city and country\r\n    </div>\r\n  )\r\n}\r\n      \r\nexport default LocationInput; ","import React, { Component} from 'react';\r\n\r\nimport './App.css';\r\nimport Weather from './weatherComponent/weather.component';\r\nimport LocationInput from './weatherComponent/form'\r\nimport 'weather-icons/css/weather-icons.css';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\n\r\n// api_key\r\nconst api_key = 'df900d1b3f82c7ef22d6994bca04fcb7';\r\nclass App extends Component {\r\n  constructor(){\r\n  super()\r\n  this.state = {\r\n    city: undefined,\r\n   country: undefined,\r\n    Temp: undefined,\r\n    Temp_max: undefined,\r\n    Temp_min: undefined,\r\n    description: undefined,\r\n    icons: undefined,\r\n    error: false\r\n  };\r\n  \r\n  this.weatherIcons = {\r\n     Thunderstorm: 'wi-thunderstorm',\r\n     Drizzle: 'wi-sleet',\r\n     Rain: 'wi-storm-showers',\r\n     Snow: 'wi-snow`',\r\n     Atmosphere: 'wi-fog',\r\n     clear: 'wi-day-sunny',\r\n    Clouds:'wi-day-fog'\r\n  }\r\n  \r\n  \r\n}\r\n \r\n  getWeatherIcon = (icon, weatherId) => {\r\n    switch(true){\r\n      case weatherId >= 200 || weatherId <= 232 :\r\n        this.setState({ \r\n          icons: this.weatherIcons.Thunderstorm\r\n        });\r\n       break;\r\n      case weatherId >= 300 || weatherId <= 321 :\r\n        this.setState({\r\n          icons: this.weatherIcons.Drizzle\r\n          })\r\n        break;\r\n      case weatherId >= 500 || weatherId <= 531 :\r\n        this.setState({\r\n          icons: this.weatherIcons.Drizzle\r\n        })\r\n        break;\r\n      case weatherId >= 600 || weatherId <= 616 :\r\n        this.setState({\r\n          icons: this.weatherIcons.Snow\r\n        })\r\n        break;\r\n      case weatherId >= 701 || weatherId <= 781 :\r\n        this.setState({\r\n          icons:this.weatherIcons.Atmosphere\r\n        })\r\n        break;\r\n      case weatherId === 800 :\r\n        this.setState({\r\n          icons: this.weatherIcons.Atmosphere\r\n        })\r\n        break;\r\n      case weatherId >= 801 || weatherId <= 804 :\r\n        this.setState({\r\n          icons:this.weatherIcons.Atmosphere\r\n        })\r\n        break;\r\n      default:\r\n      this.setState({\r\n        icons:this.weatherIcons.Atmosphere\r\n      })\r\n    }\r\n  };\r\n\r\n\r\n  convertToCelsius = (temp) => {\r\n    let cel = Math.floor(temp - 273.15);\r\n    return cel\r\n  };\r\n\r\n  clearInput= (e) => {\r\n    const city = e.target.elements.city.value\r\n    this.setState({\r\n      city: ''\r\n    })\r\n  };\r\n\r\n  weatherInfo = async (e) => {\r\n    e.preventDefault();\r\n\r\n    const city = e.target.elements.city.value;\r\n    const country = e.target.elements.country.value;\r\n    \r\n    if(city && country) {\r\n      const api_call =  await fetch(`https://api.openweathermap.org/data/2.5/weather?q=${city},${country}&appid=${api_key}`);\r\n      const res = await api_call.json();\r\n      console.log(res)\r\n      this.setState({\r\n        city: `${res.name}, ${res.sys.country}`,\r\n        Temp: this.convertToCelsius( res.main.temp),\r\n        Temp_max: this.convertToCelsius(res.main.temp_max),\r\n        Temp_min: this.convertToCelsius(res.main.temp_min),\r\n        description: res.weather[0].description,\r\n        icons:this.weatherIcons.Atmosphere\r\n        // icons: this.getWeatherIcon(this.weatherIcons,  res.weather[0].id)\r\n        // error: true\r\n      });      \r\n      this.clearInput()\r\n     } else {\r\n      this.setState({\r\n        error: true,\r\n      }) \r\n\r\n    }\r\n   \r\n  //  LocationInput.reset();\r\n  }; \r\n  \r\n\r\n  render(){\r\n  return (\r\n    <div className=\"App\">\r\n     <h1 className='py-4 text-light'>Weather App</h1>\r\n      <LocationInput  \r\n      loadweather={this.weatherInfo}  \r\n       error={this.state.error}\r\n       />\r\n        <Weather\r\n         city={this.state.city} \r\n          country={this.state.country}\r\n           Temp={this.state.Temp}\r\n            minTemp={this.state.Temp_min}\r\n             maxTemp={this.state.Temp_max}\r\n              description={this.state.description}\r\n               WeatherIcon={this.state.icons}\r\n/> \r\n    </div>\r\n  );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n//  unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}